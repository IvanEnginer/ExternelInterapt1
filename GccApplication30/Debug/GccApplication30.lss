
GccApplication30.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014a  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f8  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018c  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f6  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_3>:
#include <avr/interrupt.h>

int num = 1;

ISR(INT2_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	if (num == 1)
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	90 91 61 00 	lds	r25, 0x0061
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	29 f4       	brne	.+10     	; 0xa6 <__vector_3+0x24>
		num = 0;
  9c:	10 92 61 00 	sts	0x0061, r1
  a0:	10 92 60 00 	sts	0x0060, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <__vector_3+0x30>
	else
		num = 1;	
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
	sei();
  c0:	78 94       	sei
	GIMSK |= (1<<INT1);
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (0<<ISC11) | (1<<ISC10);
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	85 bf       	out	0x35, r24	; 53
	DDRD = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
        if (num == 1)
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	90 91 61 00 	lds	r25, 0x0061
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x20>
			PORTB |= 1;
  dc:	c0 9a       	sbi	0x18, 0	; 24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <main+0x22>
		else
			PORTB &= ~1;
  e0:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x28>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x32>
  f2:	00 00       	nop
  f4:	ed cf       	rjmp	.-38     	; 0xd0 <main+0x10>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
